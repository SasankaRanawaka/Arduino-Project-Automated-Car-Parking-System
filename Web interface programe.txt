#include <WiFi.h>
#include <WebServer.h>

// Wi-Fi credentials
const char* ssid = "LTE"; // Replace with your Wi-Fi SSID
const char* password = "nokia2.4"; // Replace with your Wi-Fi password

// ESP32 Web Server on port 80
WebServer server(80);

// Pin Definitions for analog inputs from Arduino (A0, A1, A2, A3)
const int SLOT1_PIN = 34;
const int SLOT2_PIN = 35;
const int SLOT3_PIN = 32;
const int SLOT4_PIN = 26;

// Pins to send booking signals to Arduino Uno
const int BOOK_SLOT1_PIN = 15;
const int BOOK_SLOT2_PIN = 2;
const int BOOK_SLOT3_PIN = 18;
const int BOOK_SLOT4_PIN = 19;

// Booking status (false = free, true = booked)
bool parkingSlotStatus[4] = {false, false, false, false};

// Function to read analog sensor values
bool isSlotOccupied(int pin) {
  return analogRead(pin) > 2048;  // Threshold to determine occupied status
}

void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Set GPIO pins as OUTPUT
  pinMode(BOOK_SLOT1_PIN, OUTPUT);
  pinMode(BOOK_SLOT2_PIN, OUTPUT);
  pinMode(BOOK_SLOT3_PIN, OUTPUT);
  pinMode(BOOK_SLOT4_PIN, OUTPUT);

  // Main Web Page
  server.on("/", HTTP_GET, []() {
    String html = "<!DOCTYPE html>\n"
                  "<html lang=\"en\">\n"
                  "<head>\n"
                  "    <meta charset=\"UTF-8\">\n"
                  "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
                  "    <title>DIGIPARK</title>\n"
                  "    <style>\n"
                  "/* General Styles */\n"
                  "body {\n"
                  "    font-family: 'Poppins', sans-serif;\n"
                  "    margin: 0;\n"
                  "    padding: 0;\n"
                  "    background-color: #15151e;\n"
                  "    color: #fff;\n"
                  "    text-align: center;\n"
                  "    overflow-x: hidden;\n"
                  "}\n"
                  "\n"
                  "/* Header Styles */\n"
                  "header {\n"
                  "    display: flex;\n"
                  "    justify-content: space-between;\n"
                  "    align-items: center;\n"
                  "    padding: 20px 50px;\n"
                  "    background-color: #1e1e2b;\n"
                  "    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n"
                  "}\n"
                  "\n"
                  ".logo {\n"
                  "    font-size: 32px;\n"
                  "    font-weight: 700;\n"
                  "    color: #4fc3f7;\n"
                  "    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n"
                  "}\n"
                  "\n"
                  "/* Navigation Styles */\n"
                  "nav {\n"
                  "    margin-left: auto;\n"
                  "}\n"
                  "\n"
                  "nav ul {\n"
                  "    list-style: none;\n"
                  "    display: flex;\n"
                  "    gap: 30px;\n"
                  "    padding: 0;\n"
                  "    margin: 0;\n"
                  "}\n"
                  "\n"
                  "nav ul li a {\n"
                  "    text-decoration: none;\n"
                  "    color: #8f9bb3;\n"
                  "    font-size: 18px;\n"
                  "    transition: color 0.3s ease;\n"
                  "    padding: 10px 15px;\n"
                  "    border-radius: 8px;\n"
                  "    display: block;\n"
                  "}\n"
                  "\n"
                  "nav ul li a:hover {\n"
                  "    color: #fff;\n"
                  "    background-color: rgba(255, 255, 255, 0.05);\n"
                  "}\n"
                  "\n"
                  "/* Button Styles */\n"
                  ".btn {\n"
                  "    background-color: #4fc3f7;\n"
                  "    color: #fff;\n"
                  "    padding: 14px 28px;\n"
                  "    border: none;\n"
                  "    cursor: pointer;\n"
                  "    border-radius: 10px;\n"
                  "    font-size: 18px;\n"
                  "    transition: background-color 0.3s ease;\n"
                  "    margin-left: 20px;\n"
                  "    font-weight: 500;\n"
                  "}\n"
                  "\n"
                  ".btn:hover {\n"
                  "    background-color: #43a8c4;\n"
                  "}\n"
                  "\n"
                  "/* Hero Section Styles */\n"
                  ".hero {\n"
                  "    padding: 100px 50px;\n"
                  "    text-align: left;\n"
                  "    max-width: 1200px;\n"
                  "    margin: 0 auto;\n"
                  "}\n"
                  "\n"
                  ".badge {\n"
                  "    background-color: #37474f;\n"
                  "    color: #fff;\n"
                  "    padding: 10px 15px;\n"
                  "    border-radius: 10px;\n"
                  "    font-size: 16px;\n"
                  "    opacity: 0.8;\n"
                  "    margin-bottom: 20px;\n"
                  "    display: inline-block;\n"
                  "}\n"
                  "\n"
                  "h1 {\n"
                  "    font-size: 60px;\n"
                  "    font-weight: 700;\n"
                  "    margin: 30px 0;\n"
                  "    color: #fff;\n"
                  "    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n"
                  "}\n"
                  "\n"
                  "p {\n"
                  "    font-size: 22px;\n"
                  "    color: #8f9bb3;\n"
                  "    max-width: 1000px;\n"
                  "    margin: 0 0 30px 0;\n"
                  "    line-height: 1.7;\n"
                  "}\n"
                  "\n"
                  "/* Email Box Styles */\n"
                  ".email-box {\n"
                  "    margin-top: 40px;\n"
                  "}\n"
                  "\n"
                  ".email-box input {\n"
                  "    padding: 16px;\n"
                  "    width: 400px;\n"
                  "    border: none;\n"
                  "    border-radius: 10px;\n"
                  "    font-size: 18px;\n"
                  "    color: #333;\n"
                  "}\n"
                  "\n"
                  "/* Arduino Parking System Styles */\n"
                  ".arduino-slot-container {\n"
                  "    display: flex;\n"
                  "    justify-content: center;\n"
                  "    align-items: center;\n"
                  "    padding: 20px;\n"
                  "    gap: 20px; /* Reduced gap */\n"
                  "    margin-top: 15px;\n"
                  "}\n"
                  "\n"
                  ".arduino-slot {\n"
                  "    display: flex;\n"
                  "    flex-direction: column;\n"
                  "    justify-content: space-between;\n"
                  "    align-items: center;\n"
                  "    background: #2a2a3b;\n"
                  "    padding: 15px; /* Reduced padding */\n"
                  "    border-radius: 10px; /* Reduced border-radius */\n"
                  "    width: 350px; /* Set the slot width */\n"
                  "    height: 200px; /* Set the slot height */\n"
                  "    transition: transform 0.2s, box-shadow 0.3s;\n"
                  "    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);\n"
                  "    border: 1px solid rgba(255, 255, 255, 0.05);\n"
                  "}\n"
                  "\n"
                  ".arduino-slot:hover {\n"
                  "    transform: scale(1.05);\n"
                  "    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.5);\n"
                  "}\n"
                  "\n"
                  ".arduino-slot span {\n"
                  "    font-size: 20px; /* Set slot title font-size */\n"
                  "    font-weight: 600;\n"
                  "    color: #fff;\n"
                  "    margin-bottom: 0;\n"
                  "    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);\n"
                  "    letter-spacing:1px;\n"
                  "    margin-top: 60px;\n"
                  "}\n"
                  "\n"
                  ".arduino-slot button {\n"
                  "    background: linear-gradient(135deg, #64b5f6,  #43a8c4);\n"
                  "    border: none;\n"
                  "    color: white;\n"
                  "    padding: 15px 48px; /* Set slot button padding */\n"
                  "    cursor: pointer;\n"
                  "    border-radius: 8px; /* Set slot button border-radius */\n"
                  "    font-weight: 600;\n"
                  "    transition: background 0.3s, transform 0.2s, box-shadow 0.3s;\n"
                  "    font-size: 18px; /* Set slot button font-size */\n"
                  "    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3);\n"
                  "}\n"
                  "\n"
                  ".arduino-slot button:hover {\n"
                  "    background: linear-gradient(135deg, #42a5f5, #1e60c9);\n"
                  "    transform: scale(1.03);\n"
                  "    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);\n"
                  "}\n"
                  "\n"
                  "/* Image Styles */\n"
                  ".car-image {\n"
                  "    margin-top: 80px;\n"
                  "    max-width: 80%;\n"
                  "    height: auto;\n"
                  "    display: block;\n"
                  "    margin-left: auto;\n"
                  "    margin-right: auto;\n"
                  "    border-radius: 15px;\n"
                  "    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n"
                  "}\n"
                  "    </style>\n"
                  "    <script>\n"
                  "        function bookSlot(button, slotNumber) {\n"
                  "            button.textContent = 'Booked...';\n"
                  "            button.disabled = true;\n"
                  "            window.location.href = '/book?slot=' + slotNumber;\n"
                  "        }\n"
                  "    </script>\n"
                  "</head>\n"
                  "<body>\n"
                  "    <header>\n"
                  "        <div class=\"logo\">SMART PARKING</div>\n"
                  "        <nav aria-label=\"Main Navigation\">\n"
                  "            <ul>\n"
                  "                <li><a href=\"#\">How it works</a></li>\n"
                  "                <li><a href=\"#\">Features</a></li>\n"
                  "                <li><a href=\"#\">About Us</a></li>\n"
                  "                <li><a href=\"#\">Resources</a></li>\n"
                  "            </ul>\n"
                  "        </nav>\n"
                  "        <button class=\"btn\">Contact Us</button>\n"
                  "    </header>\n"
                  "    <main class=\"hero\">\n"
                  "        <span class=\"badge\">#1 Best Software Solution For Parking</span>\n"
                  "        <h1>THE SOLUTION TO YOUR PARKING PROBLEMS</h1>\n"
                  "        <p>You can book your parking spot and view available spaces in this car park, offering a range of price options and real-time updates to make parking hassle-free.</p>\n"
                  "        <div class=\"email-box\">\n"
                  "            <input type=\"email\" placeholder=\"Please enter your inquiry here\" aria-label=\"Email Address\">\n"
                  "            <button class=\"btn\">Submit Inquiry</button>\n"
                  "        </div>\n"
                  "        <!-- Arduino Parking System -->\n"
                  "        <div class=\"arduino-container\">\n"
                  "            <div class=\"arduino-slot-container\">\n";

    // Generate parking slot cards dynamically
    for (int i = 0; i < 4; i++) {
      bool occupied = isSlotOccupied(i == 0 ? SLOT1_PIN : i == 1 ? SLOT2_PIN : i == 2 ? SLOT3_PIN : SLOT4_PIN);

      // If booked, override sensor status
      if (parkingSlotStatus[i]) {
        occupied = true;
      }

      String slotStatus = occupied ? "Occupied" : "Available";
      String buttonHTML;
      if (occupied) {
        buttonHTML = "<button disabled>Booked</button>";
      } else {
        buttonHTML = "<button onclick=\"bookSlot(this, " + String(i) + ")\">Book</button>";
      }

      html += "<div class=\"arduino-slot\">\n";
      html += "<span>SLOT " + String(i + 1) + "</span>\n";
      html += buttonHTML + "\n";
      html += "</div>\n";
    }

    html += "            </div>\n"
            "        </div>\n"
            "    </main>\n"
            "    <img src=\"car.png\" alt=\"Car on map\" class=\"car-image\">\n"
            "</body>\n"
            "</html>";

    server.send(200, "text/html", html);
  });

  // Booking logic
  server.on("/book", HTTP_GET, []() {
    String slot = server.arg("slot");
    int slotNumber = slot.toInt();

    if (slotNumber >= 0 && slotNumber < 4 && !parkingSlotStatus[slotNumber]) {
      parkingSlotStatus[slotNumber] = true;  // Mark as booked

      // Send signal to Arduino Uno
      switch (slotNumber) {
        case 0: digitalWrite(BOOK_SLOT1_PIN, HIGH); break;
        case 1: digitalWrite(BOOK_SLOT2_PIN, HIGH); break;
        case 2: digitalWrite(BOOK_SLOT3_PIN, HIGH); break;
        case 3: digitalWrite(BOOK_SLOT4_PIN, HIGH); break;
      }

      // Redirect back to main page
      server.sendHeader("Location", "/");
      server.send(303);
    } else {
      server.send(200, "text/html", "<html><body><h1>Slot already booked!</h1><a href='/'>Back</a></body></html>");
    }
  });

  server.begin();
}

void loop() {
  server.handleClient();
}
